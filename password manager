import random
import string
import base64
# Import AES class from Crypto.Cipher module
from Crypto.Cipher import AES

# Import get_random_bytes function from Crypto.Random module
from Crypto.Random import get_random_bytes
import sqlite3
user_input = input('Are you new member to our PASSWORD MANAGER?? (yes/no): ')
if user_input.lower() == 'yes':
    print('HOLA OLD USER')
    print('CUSTOMER WELCOME')
else:
    password = input("Enter your name: ")
    password = input("Enter surname: ")
    password = input("YOU HAVE SUCCEFULLY LOGGED IN CONGO ")
number = int(input("Enter 0 for encrypting your password or 1 for encrypting a new generated password: "))
if number == 0:
    password = input("Enter the password to be encrypted: ")
else:
    # Define the length of the password
    length = 8

    # Define the characters to use in the password
    chars = string.ascii_letters + string.digits + string.punctuation

    # Generate a random password by choosing a character from chars for each position
    password = "".join(random.choice(chars) for i in range(length))
# Define a message as bytes
password_bytes = password.encode("utf-8")
# Generate a random 16-byte key
key = get_random_bytes(16)

# Generate a random 16-byte initialization vector (IV)
iv = get_random_bytes(16)

# Create an AES cipher object with the key and IV in CBC mode
cipher = AES.new(key, AES.MODE_CBC, iv)

# Pad the message to make it a multiple of 16 bytes
pad_length = 16 - len(password_bytes) % 16
password_bytes += bytes([pad_length]) * pad_length

# Encrypt the message using the cipher
ciphertext = cipher.encrypt(password_bytes)

result = key + iv + ciphertext

# Encode the result using base64
encoded_result = base64.b64encode(result)

# Print the encoded result
print(encoded_result)

# Create another AES cipher object with the same key and IV in CBC mode
cipher = AES.new(key, AES.MODE_CBC, iv)

# Decrypt the ciphertext using the cipher
plaintext = cipher.decrypt(ciphertext)

# Unpad the plaintext to remove the padding bytes
pad_length = plaintext[-1]
plaintext = plaintext[:-pad_length]

# Print the plaintext
print(plaintext)

# Connect to a SQLite database called password.db
conn = sqlite3.connect("password.db")

# Create a cursor object to execute SQL commands
cur = conn.cursor()

# Create a table called passwords if it does not exist already
cur.execute("CREATE TABLE IF NOT EXISTS passwords (id INTEGER PRIMARY KEY, password TEXT, encrypted TEXT)")

# Insert the encoded result into the table as a new record
cur.executemany("INSERT INTO passwords (password, encrypted) VALUES (?,?)",[(password, encoded_result)])

# Commit the changes to the database
conn.commit()

# Select all records from the passwords table
cur.execute("SELECT * FROM passwords")

# Fetch all the records as a list of tuples
records = cur.fetchall()

# Print each record
for record in records:
    print(record)

# Close the connection
conn.close()
